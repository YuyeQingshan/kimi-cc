#!/usr/bin/env zsh

# kimi-cc oh-my-zsh plugin
# 使用月之暗面（Moonshot）提供的 Kimi 模型服务来运行 Claude Code，并管理相关环境变量

# 默认使用 Claude Code 的后端服务
# 用户可以通过 KIMI_CC_BASE_URL 覆盖为其他 API 端点
DEFAULT_ANTHROPIC_BASE_URL="https://api.anthropic.com"

# 配置文件路径
KIMI_CONFIG_FILE="$HOME/.kimiccrc"

# 全局模式开关文件
KIMI_GLOBAL_MODE_FILE="$HOME/.kimi_global_mode"

# 检查是否启用全局模式
function _is_global_mode_enabled() {
    [[ -f "$KIMI_GLOBAL_MODE_FILE" ]]
}

# 获取全局模式状态
function _get_global_mode_status() {
    if _is_global_mode_enabled; then
        echo "enabled"
    else
        echo "disabled"
    fi
}

# 统一状态显示
function _show_status() {
    local status_type="$1"
    local message="$2"
    local detail="${3:-}"
    
    case "$status_type" in
        "success"|"ok") echo "✓ $message" ;;
        "error"|"fail") echo "✗ $message" ;;
        "neutral"|"default") echo "○ $message" ;;
        *) echo "$message" ;;
    esac
    
    if [[ -n "$detail" ]]; then
        echo "  $detail"
    fi
}

# 显示环境变量状态
function _show_env_status() {
    local prefix="${1:-}"
    local context="${2:-config}"
    
    if [[ -n "$ANTHROPIC_AUTH_TOKEN" ]]; then
        case "$context" in
            "config") _show_status "success" "${prefix}ANTHROPIC_AUTH_TOKEN: 已设置 (全局覆盖)" ;;
            "enable") _show_status "success" "${prefix}ANTHROPIC_AUTH_TOKEN 已设置为 Kimi token" ;;
            "status") echo "${prefix}  ANTHROPIC_AUTH_TOKEN: 已设置" ;;
        esac
    else
        [[ "$context" == "config" ]] && _show_status "error" "${prefix}ANTHROPIC_AUTH_TOKEN: 未设置"
    fi
    
    if [[ -n "$ANTHROPIC_BASE_URL" ]]; then
        case "$context" in
            "config") _show_status "success" "${prefix}ANTHROPIC_BASE_URL: $ANTHROPIC_BASE_URL (全局覆盖)" ;;
            "enable") _show_status "success" "${prefix}ANTHROPIC_BASE_URL 已设置为: $ANTHROPIC_BASE_URL" ;;
            "status") echo "${prefix}  ANTHROPIC_BASE_URL: $ANTHROPIC_BASE_URL" ;;
        esac
    else
        [[ "$context" == "config" ]] && _show_status "error" "${prefix}ANTHROPIC_BASE_URL: 未设置"
    fi
}

# 检查claude命令是否存在
function _check_claude_command() {
    if ! command -v claude &> /dev/null; then
        _show_status "error" "未找到 claude 命令。请先安装 claude code。"
        echo "安装命令: npm install -g @anthropic-ai/claude-code"
        return 1
    fi
    return 0
}

# 显示全局模式状态消息
function _show_global_mode_status() {
    local mode="$(_get_global_mode_status)"
    case "$mode" in
        "enabled") _show_status "success" "全局模式: 已启用" ;;
        "disabled") _show_status "neutral" "全局模式: 未启用" ;;
    esac
}

# 通用消息函数
function _show_config_saved() {
    _show_status "success" "配置已保存到 ~/.kimiccrc"
}

function _show_restart_hint() {
    echo "  重新启动终端或运行 'source ~/.zshrc' 以应用更改"
}

# 应用全局环境变量覆盖
function _apply_global_override() {
    if _is_global_mode_enabled; then
        local auth_token
        auth_token="$(_get_auth_token)"
        
        if [[ -n "$auth_token" ]]; then
            # 强制覆盖，即使值相同也要设置
            unset ANTHROPIC_AUTH_TOKEN
            export ANTHROPIC_AUTH_TOKEN="$auth_token"
        fi
        
        local base_url="${KIMI_CC_BASE_URL:-https://api.moonshot.cn/anthropic/}"
        if [[ -n "$base_url" ]]; then
            # 强制覆盖，即使值相同也要设置
            unset ANTHROPIC_BASE_URL
            export ANTHROPIC_BASE_URL="$base_url"
        fi
    fi
}

# 加载配置文件
function _load_kimi_config() {
    if [[ -f "$KIMI_CONFIG_FILE" ]]; then
        source "$KIMI_CONFIG_FILE"
    fi
}

# 写入配置到文件
function _write_kimi_config() {
    local auth_token="$(_get_auth_token)"
    
    # 确保有 token 才写入文件
    if [[ -z "$auth_token" ]]; then
        echo "警告: 无有效的 AUTH TOKEN，跳过写入配置文件"
        return 1
    fi
    
    # 开始写入配置文件
    cat > "$KIMI_CONFIG_FILE" << 'EOF'
# Kimi Claude Code Configuration
# Generated by kimi-cc plugin
# Edit this file to customize your settings

EOF
    
    # 写入 AUTH TOKEN
    echo "export KIMI_CC_AUTH_TOKEN=\"$auth_token\"" >> "$KIMI_CONFIG_FILE"
    
    # 只在用户明确设置了 BASE_URL 时才写入
    if [[ -n "$KIMI_CC_BASE_URL" && "$KIMI_CC_BASE_URL" != "https://api.moonshot.cn/anthropic/" ]]; then
        echo "export KIMI_CC_BASE_URL=\"$KIMI_CC_BASE_URL\"" >> "$KIMI_CONFIG_FILE"
    fi
    
    chmod 600 "$KIMI_CONFIG_FILE"  # 保护配置文件权限
}

# 加载配置文件
_load_kimi_config

# 获取 AUTH TOKEN，只支持 KIMI_CC_AUTH_TOKEN
function _get_auth_token() {
    if [[ -n "$KIMI_CC_AUTH_TOKEN" ]]; then
        echo "$KIMI_CC_AUTH_TOKEN"
    else
        echo ""
    fi
}

# 初始化 KIMI_CC_BASE_URL 默认值（仅在用户未设置时）
if [[ -z "$KIMI_CC_BASE_URL" ]]; then
    KIMI_CC_BASE_URL="https://api.moonshot.cn/anthropic/"
fi

# 应用全局环境变量覆盖（如果启用）
_apply_global_override

# 添加 precmd hook 确保全局模式在每次命令前都生效
function _kimi_cc_precmd_hook() {
    # 只在启用全局模式时执行
    if _is_global_mode_enabled; then
        local auth_token
        auth_token="$(_get_auth_token)"
        
        # 检查是否需要重新设置环境变量
        if [[ -n "$auth_token" && "$ANTHROPIC_AUTH_TOKEN" != "$auth_token" ]]; then
            export ANTHROPIC_AUTH_TOKEN="$auth_token"
        fi
        
        local base_url="${KIMI_CC_BASE_URL:-https://api.moonshot.cn/anthropic/}"
        if [[ -n "$base_url" && "$ANTHROPIC_BASE_URL" != "$base_url" ]]; then
            export ANTHROPIC_BASE_URL="$base_url"
        fi
    fi
}

# 注册 precmd hook
autoload -U add-zsh-hook
add-zsh-hook precmd _kimi_cc_precmd_hook

# 启动 claude code 的主函数
function kimi-cc() {
    # 检查是否安装了 claude code
    _check_claude_command || return 1

    # 检查 AUTH TOKEN 是否设置
    local auth_token
    auth_token="$(_get_auth_token)"
    
    # 如果没有设置 token，引导用户设置
    if [[ -z "$auth_token" ]]; then
        echo "欢迎使用 kimi-cc！"
        echo ""
        _show_status "neutral" "检测到未设置 API Token"
        echo ""
        echo "请获取你的 Moonshot API Token："
        echo "1. 访问 https://platform.moonshot.cn"
        echo "2. 注册/登录账号"
        echo "3. 在控制台获取 API Key"
        echo ""
        
        # 提示用户输入 token
        echo -n "请输入你的 API Token: "
        read -r user_token
        
        # 验证输入
        if [[ -z "$user_token" ]]; then
            _show_status "error" "未输入 Token，退出设置"
            return 1
        fi
        
        # 基本格式验证（简单检查是否像个 token）
        if [[ ${#user_token} -lt 10 ]]; then
            _show_status "error" "Token 格式可能不正确（长度太短），请检查后重试"
            return 1
        fi
        
        # 设置 token
        export KIMI_CC_AUTH_TOKEN="$user_token"
        
        # 写入配置文件
        if _write_kimi_config; then
            echo ""
            _show_status "success" "Token 设置成功！"
            _show_config_saved
            echo ""
            auth_token="$user_token"
        else
            _show_status "error" "配置文件写入失败"
            return 1
        fi
    fi

    # 设置 ANTHROPIC_BASE_URL
    local base_url="${KIMI_CC_BASE_URL:-$DEFAULT_ANTHROPIC_BASE_URL}"

    # 在子shell中设置环境变量并启动 claude code
    (
        export ANTHROPIC_AUTH_TOKEN="$auth_token"
        export ANTHROPIC_BASE_URL="$base_url"
        
        echo "正在启动 claude code..."
        echo "使用 API 端点: $base_url"
        if [[ "$base_url" == *"moonshot.cn"* ]]; then
            echo "正在使用 Moonshot Kimi 模型服务..."
        fi
        
        # 启动 claude code 并传递所有参数
        claude "$@"
    )
}

# 显示当前配置
function kimi-cc-config() {
    echo "kimi-cc 配置信息:"
    echo "=================="
    
    # 显示全局模式状态
    _show_global_mode_status
    
    local auth_token
    auth_token="$(_get_auth_token)"
    
    if [[ -n "$auth_token" ]]; then
        _show_status "success" "KIMI_CC_AUTH_TOKEN: 已设置 (${auth_token:0:10}...)"
    else
        _show_status "error" "KIMI_CC_AUTH_TOKEN: 未设置"
    fi
    
    local base_url="${KIMI_CC_BASE_URL:-$DEFAULT_ANTHROPIC_BASE_URL}"
    if [[ -n "$KIMI_CC_BASE_URL" ]]; then
        _show_status "success" "Base URL: $base_url (自定义设置)"
    else
        _show_status "neutral" "Base URL: $base_url (默认值)"
    fi
    
    # 显示当前全局环境变量状态
    if _is_global_mode_enabled; then
        _show_env_status "" "config"
    fi
    
    if command -v claude &> /dev/null; then
        _show_status "success" "claude 命令: 已安装"
    else
        _show_status "error" "claude 命令: 未安装"
    fi
    
    # 显示配置文件信息
    if [[ -f "$KIMI_CONFIG_FILE" ]]; then
        _show_status "success" "配置文件: ~/.kimiccrc (已存在)"
    else
        _show_status "neutral" "配置文件: ~/.kimiccrc (未创建)"
    fi
}

# 设置 KIMI_CC_AUTH_TOKEN 的辅助函数
function kimi-cc-set-token() {
    if [[ -z "$1" ]]; then
        echo "用法: kimi-cc-set-token <auth_token>"
        echo "例如: kimi-cc-set-token sk-ant-api03-..."
        return 1
    fi
    
    export KIMI_CC_AUTH_TOKEN="$1"
    _show_status "success" "已设置 KIMI_CC_AUTH_TOKEN"
    
    # 写入配置文件
    _write_kimi_config
    _show_config_saved
}

# 启用全局模式
function kimi-cc-enable-global() {
    touch "$KIMI_GLOBAL_MODE_FILE"
    _show_status "success" "已启用全局模式"
    echo "  现在所有 claude 命令都将使用 Kimi 服务"
    _show_restart_hint
    
    # 立即应用全局覆盖
    _apply_global_override
    
    _show_env_status "" "enable"
}

# 从 .zshrc 中提取特定的 ANTHROPIC 环境变量
function _restore_anthropic_env_from_zshrc() {
    local zshrc_file="${1:-$HOME/.zshrc}"
    
    if [[ -f "$zshrc_file" ]]; then
        # 使用 grep 和 eval 安全地提取环境变量设置
        local anthropic_exports
        anthropic_exports=$(grep -E '^export (ANTHROPIC_AUTH_TOKEN|ANTHROPIC_BASE_URL)=' "$zshrc_file" 2>/dev/null)
        
        if [[ -n "$anthropic_exports" ]]; then
            # 逐行处理找到的 export 语句
            while IFS= read -r line; do
                if [[ -n "$line" ]]; then
                    # 安全地执行 export 语句
                    eval "$line"
                fi
            done <<< "$anthropic_exports"
            
            _show_status "success" "已从 ~/.zshrc 恢复 ANTHROPIC 环境变量"
            _show_env_status "  " "status"
        else
            _show_status "neutral" "~/.zshrc 中未找到 ANTHROPIC 环境变量配置"
        fi
    fi
}

# 禁用全局模式
function kimi-cc-disable-global() {
    if [[ -f "$KIMI_GLOBAL_MODE_FILE" ]]; then
        rm "$KIMI_GLOBAL_MODE_FILE"
        _show_status "success" "已禁用全局模式"
        echo "  现在 claude 命令将使用原始配置"
        
        # 清除当前会话的全局变量
        unset ANTHROPIC_AUTH_TOKEN ANTHROPIC_BASE_URL
        
        # 尝试从 .zshrc 恢复原始的 ANTHROPIC 环境变量
        _restore_anthropic_env_from_zshrc
        
        _show_restart_hint
    else
        echo "全局模式未启用"
    fi
}

# 显示全局模式状态
function kimi-cc-global-status() {
    local mode="$(_get_global_mode_status)"
    case "$mode" in
        "enabled")
            _show_status "success" "全局模式: 已启用"
            echo "  所有 claude 命令都使用 Kimi 服务"
            _show_env_status "  " "status"
            ;;
        "disabled")
            _show_status "neutral" "全局模式: 未启用"
            echo "  使用 'kimi-cc-enable-global' 启用全局模式"
            ;;
    esac
}

# 设置 KIMI_CC_BASE_URL 的辅助函数
function kimi-cc-set-url() {
    if [[ -z "$1" ]]; then
        echo "用法: kimi-cc-set-url <base_url>"
        echo "例如: kimi-cc-set-url https://api.anthropic.com"
        return 1
    fi
    
    export KIMI_CC_BASE_URL="$1"
    _show_status "success" "已设置 KIMI_CC_BASE_URL 为: $1"
    
    # 写入配置文件
    _write_kimi_config
    _show_config_saved
}

# 帮助信息
function kimi-cc-help() {
    cat << 'EOF'
kimi-cc - Claude Code 启动器

使用方法:
  kimi-cc [claude_code_参数]    - 启动 claude code
  kimi-cc-config                - 显示当前配置
  kimi-cc-set-token <token>     - 设置 API Token
  kimi-cc-set-url <url>         - 设置自定义 Base URL
  kimi-cc-enable-global         - 启用全局模式
  kimi-cc-disable-global        - 禁用全局模式
  kimi-cc-global-status         - 显示全局模式状态
  kimi-cc-help                  - 显示此帮助信息

环境变量配置:
  KIMI_CC_AUTH_TOKEN       - 必需，你的 API token
  KIMI_CC_BASE_URL         - 可选，自定义 API base URL

配置文件:
  ~/.kimiccrc              - 持久化配置文件（自动生成）

全局模式说明:
  使用 kimi-cc-enable-global 启用
  
  启用后会让 KIMI_CC_AUTH_TOKEN 和 KIMI_CC_BASE_URL 
  影响全局的 ANTHROPIC_AUTH_TOKEN 和 ANTHROPIC_BASE_URL

推荐配置方式:
  # 使用插件命令设置（推荐）
  kimi-cc-set-token your_token_here
  kimi-cc-set-url https://your-custom-api.com  # 可选

注意: 使用 kimi-cc-set-token 和 kimi-cc-set-url 命令
会自动将配置保存到 ~/.kimiccrc 文件中

安装 claude code:
  npm install -g @anthropic-ai/claude-code
EOF
}

